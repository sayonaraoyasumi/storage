<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja" lang="ja">
    <head>
        <meta charset="utf-8"/>
        
        <link rel="stylesheet" href="style-standard.css" type="text/css"/>

        <link rel="stylesheet" href="style-advance.css" type="text/css"/>

        <link rel="stylesheet" href="book-style.css" type="text/css"/>

        
        <title>たのしいゲームシナリオ入門</title>
    </head>
    <body class="bodymatter hltr" epub:type="bodymatter">
        <h3 id="toc_index_1">第３章　書式に関するエトセトラ</h3>

<h4 id="toc_index_2">いろんな書式がある</h4>

<p>　物語の中味の話から、お次はゲームの書式の話です。</p>

<p><br/></p>

<p>　いったいどう書けばいいのか？<br/>
　ツールはなにを使い、どんなことに気をつければ良いのか？</p>

<p><br/></p>

<p>　という、まるでハウツー本のようなことを書きます。<br/>
　ところがですね。無難にハウツーできるほど業界の標準的なスタイルってないんですよ。なのでこの本の、エッセイ的な奔放さを活かして、このときはこうだった、これはこうかもしれない、というじつにアバウトで参考にし難いお話を並べようと思います。<br/>
　じっさいにこの業界、スタンスを楽にとって、どんなサーブにでも食らいつけるように構えていないとやっていけないのです。<br/>
　だからこの章ではわたくし、昔のスポ根アニメのように、特訓と称してボールをぶん投げますので、みなさんは手や足、顔面を使って上手にレシーブしてください。</p>

<p><br/></p>

<p>　そんなわけでまずは、『ゲームのシナリオを書いてくれ！』……と、頼まれた場合、果たして、どんな書式で書けば良いのか、について書きます。</p>

<h4 id="toc_index_3">パワポのプレゼンスタイルのシナリオ</h4>

<p>　ゲームのシナリオを書いてくれ！<br/>
　と頼まれた場合、相手方に提出物はどんなものが良いか確認を取るのが正解なのですが、概ね最初は『あらすじ』です。<br/>
　word で A4 用紙に２～３枚、こんな感じでどうですか？　という感じでやりとりして、そこから先へ進む、というケースが多いと思います。</p>

<p><br/></p>

<p>　わたくしの場合、この時点でパワーポイントでプレゼン資料のようにまとめるケースが多いです。<br/>
　と、言葉で説明しても伝わりにくいと思いますので、サンプルを貼っておきます。（実際にプレゼンに使用した書類の抜粋ですが、絵は公開できないのでモザイクをかけました）</p>

<p><br/></p>

<div class="centerimage"><img src="sample_p.jpg" alt="パワーポイントサンプル"/></div>

<p><br/></p>

<p>　ポイントは、</p>

<p><br/></p>

<p>『どうせ読まない』</p>

<p><br/></p>

<p>　です。</p>

<p><br/></p>

<p>　提案させておいて読まないなんてことはないだろうと思うかもしれませんが、まあ、読みませんね。経歴を見て、提出物をさらっと見たら（提出物があるかどうかしか見ていません）、じゃあ会って話を聞いてみようかとなって、面談で決まる、みたいなのばっかりです。<br/>
　物理的に読まないひと、読むけど最初からココロがブロックしてるひと、意外と多いです。</p>

<p><br/></p>

<p>　と、これではちゃんと読んでるひとに失礼な話にはなってしまいますが、逆に、<br/>
「いや、わたしはちゃんと読んでいます」<br/>
　ってひとがいたら、そのひとは神ですよ。読んでほしいもの無限に送りつけます。<br/>
　ていうか、無限に送りつけるひと、無限にいますよ。</p>

<p><br/></p>

<p>　そしてこの流れで、じっさいに「このストーリーで行きましょう」となったあと、これはもう千差万別で、クライアント側で Googleドライブにひな形を用意してくれることもあれば、テキストのベタ打ちでも良いケースもあり、基本はプロジェクトごとに相談しながら、ということになります。</p>

<h4 id="toc_index_4">よくあるExcelシート</h4>

<p>　本格稼働したらExcelでやりとりすることが多いと思います。<br/>
　あるいは Google のスプレッドシートを使用することもあります。<br/>
　クライアントから書式の指定が来るかもしれませんが、わたくしの場合、使い慣れたシートがあるので、それを先方のリクエストに合わせて改良して使っています。<br/>
　履歴を残せるし、関数を使いこなせるようになれば変更点をハイライトできるし、ソートも抽出もお手の物と、とても使い勝手が良いです。<br/>
　ただひとつ難点なのは、行のコピペ時に『条件付き書式』のデータが増殖していくことで、月に一度くらいこれのお掃除で時間が潰れます。</p>

<p><br/></p>

<div class="centerimage"><img src="sample_e.jpg" alt="エクセルサンプル"/></div>

<p><br/></p>

<p>　普段使っているものは、プロジェクトに合わせて調整してありますが、基本はこんな感じです。古いシートも残しておいて、比較して背景色が変わるようにしてあります。（ただし、行が挿入・削除されるとズレます）<br/>
　このエクセルシートはさよならおやすみノベルズのサイト（sonovels.com）で公開しますので、興味がありましたらダウンロードしてみてください。</p>

<h4 id="toc_index_5">アニメの脚本スタイル</h4>

<p>　シナリオのスタイルでいちばんピンと来るのはアニメやドラマのシナリオだと思いますが、アニメやドラマの脚本のスタイルで提出を求められたことは、いままでにありません。しかし、とあるゲームの制作時、どうしてもアニメ化してほしくて、勝手にアニメ版のシナリオを書いて、勝手に提出したことならあります。採用はされませんでしたが。</p>

<p><br/></p>

<p>　この業界にいると、採用時の応募作、あるいはコラボ先のアニメの脚本などを目にすることはありますが、おそらくゲームでこのスタイルを求められることはほぼないと思います。オプションとしてこの書き方を習得しておくのは悪くありませんが、『映画化してくれ！』と訴えるときくらいにしか使えません。そして、採用はされません。</p>

<p><br/></p>

<p>　アニメやドラマの脚本は200字詰原稿用紙に書かれていた経緯があり、いまでも１行あたりの文字数は20文字で折り返します。原稿用紙では、話者＋セリフで20行でしたが、そこまで厳密に合わせる必要はないと思います。わたくしが使っているのは、200字詰原稿用紙を横位置のA4用紙に４枚ぶん配置したスタイルです。<br/>
　書式はもしかしたら他にもあるかもしれませんので、これを絶対だとは思わないようにしてください。</p>

<p><br/></p>

<div class="centerimage"><img src="sample_s.jpg" alt="エクセルサンプル"/></div>

<p><br/></p>

<p>　念を押しますと、この本はアニメやドラマのシナリオのことは書いていません。わたくしの情報が古い可能性もありますので、もしアニメやドラマの脚本を書かれる場合は、どこか他で正しい情報を仕入れてください。</p>

<h4 id="toc_index_6">稀にあるアフレコ台本スタイル</h4>

<p>　そしてこれが曲者なのですが、アフレコ台本スタイルでの提出。<br/>
　これはシナリオを請け負っている限りはほとんど頼まれることはないはずなのですが、プロジェクトにがっつり入ってしまうと、『フェイシャルモーション（3D用の口パクデータ）のテスト用に冒頭部分を先に収録したい』などという話が来て、それ用に用意する、ということがあります。<br/>
　最終的なアフレコ台本は、音声収録を依頼するとそこの会社のひと（音響制作さん）が作ってくれます。あるいは音声収録台本を作ってくれる会社さんもありますが、予算を確保せずに現場判断で動かざるを得ない場合などは、これを自前で用意することになります。しかし素人作業になるので、基本的にはオススメしません。万が一やることになったら、納品の形式などは先方と相談して決めてください。</p>

<p><br/></p>

<p>　なぜアフレコ台本が必要か。<br/>
　それは、脚本に書かれているト書きと、アフレコ台本の状況説明とは一致しないことが多く、脚本では基本的に声は録れないからです。<br/>
　たとえば――</p>

<p><br/></p>

<p>　主人公「（窓の外を見ながら）いつまで降ってるんだろう」</p>

<p><br/></p>

<p>　と、脚本に書いてあったとしても、じっさいの画面では窓の向こうの雨だけが映ってる可能性があります。なので、じっさいの映像にあわせて、「窓の外に街並みが見え、雨が降っている」というタイミングで「いつまで降ってるんだろう」というセリフが入ることを伝えなければいけません。</p>

<p><br/></p>

<p>　じっさいに音声収録して上がってくるのは音声データだけなので、セリフが書いてあるテキストだけ渡せば録れるだろうと考えるひとも少なくありませんが、それではセリフの質も下がるし、場合によっては無用なリテイクが発生します。<br/>
　演技のないものならテキストだけ渡してもなんとかなるかもしれませんが、それであっても、だれのセリフか、総数がいくつか、話者の性格や特徴、などがわかる状態で提出する必要があります。</p>

<p><br/></p>

<p>　ボイス収録はスタジオや声優、音響監督のスケジュールを押さえなければいけないので、簡単に録り直しできるものではなく、かつ、フェイシャルモーション合わせなど後の行程にも影響があるので、制作がしっかり仕切らないと大事故が起こります。<br/>
　そういう意味ではシナリオで契約している人間にアフレコ台本を依頼している時点で、そのプロジェクトは駄目なんですが、制作工程のすべてを把握している人間ってのはそうそういるものではありません。ゲーム制作はすべてが挑戦であり、手探りで持ち合わせの知識を合わせてなんとか凌ぐ、というケースが起きるものです。<br/>
　現場ではとにかく、知恵を出し合うことが求められます。</p>

<h4 id="toc_index_7">スタイルガイド</h4>

<p>　お話は少しずつめんどうなところに踏み込んでいきますが、お次は表記スタイルです。<br/>
　それを統一するためのルールを作り、周知するのも大切な仕事になります。</p>

<p><br/></p>

<p>　表記スタイルといっても、自分ひとりで書いているかぎり、そんなに大きな問題はありません。多くのひとで分担して書いている場合に問題になります。<br/>
　ゲームのシナリオはアクション中心のものでも30万文字、スタンドアローンのＲＰＧで100万文字、ちょっと面倒なタイプだと平気で200万文字を超えます。小説１冊が10万文字から30万文字、30万文字の小説だと読了に10時間程度かかる、といえばその莫大な量が見当付くと思います。<br/>
　ゲームの場合はこの大半がセリフなので、斜め読みでスルスル読めてしまうんですが、書く方の手間としてはそんなに変わりませんし、100万文字のゲームを半年でひとりで書けと言われたら、そりゃあもう地獄ですよ。</p>

<p><br/></p>

<p>　そのため作業は分担して行い、表記の統一が必要になるのですが、そのときによく問題になる話題を箇条書します。</p>

<p><br/></p>

<p>・句読点を打つか打たないか<br/>
・三点リーダ（…）は二個セットか、一個を許容するか<br/>
・「おーーーーーーーーい」などの伸ばし棒になにを使用するか<br/>
・重要アイテム名を《》で囲んだりするか否か<br/>
・MacとWindowsで半角チルダをどう統一するか（これは時が解決しました）<br/>
・漢字はどの水準まで使用するか、『伐る』や『観る』を使用するか否か<br/>
・ルビは振るか振らないか、振るとしたら書式と仕様の決定<br/>
・改行は自動か手動か、自動だとしたら禁則ルール、手動だとしたら改行ルール<br/>
・ココロの声をどう表記するか<br/>
・文字の色変えなどのルール<br/>
・固有名詞を変数に置き換えるか否か<br/>
・カタカナ語をどの程度まで用いるか</p>

<p><br/></p>

<p>　などなど、ひとりで書いているときは気にもしないようなことを、文書にした上で共有します。ただし、共有したところであまり守られないので、本気で統一したいならだれかひとりが目を凝らすしかあありません。</p>

<p><br/></p>

<p>　元も子もないようですが、『あまり守られない』というより、ものによっては守りようがありません。<br/>
「だって普通に打ったらその文字が出るんだもん」<br/>
　とか、<br/>
「ファイルコピペしたら OS が勝手に文字コード変換しやがったんだもん」<br/>
　みたいに、OSレベルで問題をはらんでおり、人間の注意力だけではどうしようもない部分も少なくはありません。</p>

<p><br/></p>

<p>　ちなみに、アメリカでは『スタイルガイド』と言うそうです。日本でも翻訳関連ならそれで通じると思います。</p>

<h4 id="toc_index_8">不本意な『○』と『…』</h4>

<p>　このほかにも、シナリオの柱の『○』の問題があります。（問題にしているのは筆者だけだという声もありますが）</p>

<p><br/></p>

<p>　この柱の○は、シーン番号を入れるための○なので、Unicode の定義通りに言えば◯（大きな丸）が機能的には合致します。Unicode ではこの文字が合成用の文字として定義されています。が、このことを知っているひとは少なく、基本的には○を使うひとが多く、わたくしも不本意ながらそれに合わせている次第です。<br/>
　いまでは柱の○に数字を入れることもないし、Unicode で◯を合成に使うこともありませんが、すべてに仕様というものがあるのですから、本来ならその大原則に沿ってデータを組むべきなのです。</p>

<p><br/></p>

<p>　また『…』は三点リーダと呼ばれていますが、Unicodeの機能的には省略記号であり、リーダではありません。リーダとして使う場合は『‥』（二点リーダ）を使うべきです。が、これも不本意ながら、この『…』（省略記号）を三点リーダと呼び、あまつさえ「三点リーダを使いましょう」と周知する役目を負っております。</p>

<p><br/></p>

<p>　この二件は本当に不本意で、いつもココロを殺しながら言っているんだってことをわかってほしいです。「それ、三点リーダじゃありませんよね？」とかひとから言われたら暴れますよ？</p>

<h4 id="toc_index_9">おーーーーーーい！</h4>

<p>　複数人でテキストを書いていると、</p>

<p><br/></p>

<p>　おーーーーーーーーい！（普通の伸ばし棒）<br/>
　お――――――――い！（ダッシュ）<br/>
　お────────い！（罫線）<br/>
　お<span class="sideways">－</span><span class="sideways">－</span><span class="sideways">－</span><span class="sideways">－</span><span class="sideways">－</span><span class="sideways">－</span><span class="sideways">－</span><span class="sideways">－</span>い！（全角ハイフン）</p>

<p><br/></p>

<p>　この連続した伸ばし棒をどう書くか、ひとそれぞれです。<br/>
　ダッシュ派が多いような気はするんですが、罫線だとほとんどのフォントで途切れがないので罫線派も多く、また普通の伸ばし棒にこだわるひともいて、理由を聞いてみると「文章を大事にしたいから」という言葉が返ってきて、なにか大切なものを思い出させられたこともありました。</p>

<p><br/></p>

<p>　わたくしの場合は、ダッシュを使うことが多い気がしますが、ダッシュにすると本来の用法のとき混乱してしまう欠点があります。<br/>
　――たとえばこんなふうに、ダッシュで囲んだなかでだれかが『お――い！』と叫んだら――<br/>
　変じゃないですか？<br/>
　無理に統一する必要もないとも言えなくもないのですが、検索性が下がる、他ハードに移植されたときにフォントが変わる可能性がある、などを考えると、安全策を取るなら統一したほうが良いです。</p>

<p><br/></p>

<p>　かつてはMacのチルダとWindowsのチルダが反対向きで、同じコードを打っているつもりでも違う文字が出てたというようなことがありました。<br/>
　この、本人は同じコードを打ってるつもり、というのが非常にやっかいで、いまはだいぶ解決されては来たのですが『―』（ダッシュ）に関しては自分がどのコードを書いているのかいまだに自信が持てません。<br/>
　この本が教則本や教科書であれば、「伸ばし棒には○○を使いましょう」と言えるのですが、ゲーム制作の現場からしたら教則本にそんなルールを決められたくないというのが正直なところなので、ここでは優劣を決めません。ただ、個人的には『―』（ダッシュ）が好きです。</p>

<p><br/></p>

<p>　ちなみに、製品になってるゲームでも伸ばし棒が一箇所だけハイフンになっているなどのミスが紛れ込んでいたりするのですが、それを見つけちゃうユーザーがいるんですよ。すごいですよ、ユーザーさんって。</p>

<h4 id="toc_index_10">全角アポストロフィー問題</h4>

<p>　文字コードに潜む問題の多くは、時が解決したか、あるいは解決中です。<br/>
　半角チルダ問題はほぼ解決しましたし、ダッシュはもう気にしないことにしました。無理ですもの。最近では文字コードはほぼ Unicode に移行して、ライター間の環境の違いによる問題もどんどん解決されつつあるのですが、新たな問題も発生しています。そのひとつが『全角アポストロフィ問題』です。<br/>
　どういうものかと言うと――</p>

<p><br/></p>

<p>　英語で表記された文字のなかのアポストロフィ記号だけが全角になる。</p>

<p><br/></p>

<p>　――という問題です。</p>

<p><br/></p>

<p>　英語の『'』には、似た記号が複数ありまして、アポストロフィ、シングルクオート、プライム（むかしはダッシュと呼んでた記号で、いまもダッシュでこちらを指す人も多い）、逆プライム、グレイブ・アクセント（バッククオート）、その他……と覚えられないくらい存在します。<br/>
　このなかのアポストロフィが問題で、Unicode では『アポストロフィにはシングルクオートを用いましょう』というポリシーが取られ、アポストロフィの番号には全角のアポストロフィの字形が割り当てられています。<br/>
　ところがこの全角の字形が割り当てられているのは、全角文字まで網羅したフォントだけで、欧州言語だけしかないフォントで見れば、普通に半角のアポストロフィに見えるんです。<br/>
　翻訳に出して、海外の環境で打たれた文章だと、本人たちはそれが全角で表示されるとは思わずに納品してくるので、じっさいにROMで見てチェックする際に「無用な半角スペースが挿入されている」という不可思議なバグレポートになって上がってきます。<br/>
　そのバグレポートをプログラマが受け取り、全角アポストロフィ問題というのを知らなければ、いったいこのスペースがどこで挿入されたのかとトレースしてしまう無駄な手間を取られることになります。本当はスペースが挿入されているのではなく、フォントの字形の問題です。</p>

<p><br/></p>

<p>　この問題の解決方法は、<br/>
　・翻訳者にアポストロフィをシングルクオートで置換してもらう<br/>
　・海外版ではフォントを変更する<br/>
　の、どちらかになると思います。<br/>
　あるいは、<br/>
　・納品されたテキストを制作側で修正する<br/>
　・ビルド時のプレ処理で変換する<br/>
　・文字表示の際に文字番号を変換するプレ処理を通す<br/>
　という手もありますが、よほどのことがない限り推奨しません。</p>

<h4 id="toc_index_11">翻訳用にコメントはつけておこう</h4>

<p>　翻訳の話が出たので、翻訳の際の注意点を記しておきたいと思います。<br/>
　昨今のゲームは海外版のあるなしで大きく売上が変わりますし、海外版の存在は必須だと思います。勢い、海外での発売時期、日本での発売時期双方を睨んだ戦略が必要になり、翻訳のワークフロー作成も非常に重要になるのですが、そのあたりはまあプロマネやプロデューサーにまかせて、われわれシナリオライターのやることを記すと、それは『ト書き・コメントを付けること』です。<br/>
　海外で受けないシナリオやネタに関する話題もあるのですが、そこは後回しにして、とにかくコメントです。</p>

<p><br/></p>

<p>　制作費を抑えたいマネージャーは、ト書きもコメントも削ってテキストだけ翻訳に回したいと思うかもしれませんが、結局それが翻訳ミスを誘発し、「ストーリーの意図がつかめません」というメールでのやり取りが増え、そのために制作が遅れ、結果として何千万の追加予算がかかる……という事態になることも想像できます。<br/>
　翻訳に回す文字数が多少減ったところで、ワークフローの乱れから制作が伸びれば予算的には損害が出るのです。それはシナリオの予算には計上されず、どこで膨らんだかわからない費用になりますが、その見極めが必要です。</p>

<p><br/></p>

<p>　ゲーム、特にオールドスタイルのものは、セリフだけで状況がわかるように書かれているので、テキストだけでもそこそこ通じたのですが、最近はボイスを当てるのが普通で、そうなると同じ字面でもどういう意図のセリフか、というのが重要になります。<br/>
　それも、絵コンテやプレビズ動画（プレ・ビジュアライゼーション、本番前のテスト動画）があるならまだしも、英語版と日本語版の開発が同時に進むケースも少なくありません。ゲーム制作で時間に余裕があるなんてことは、ほぼありません。だからシナリオでも、日英間で差異が出ないように極力気を配る必要があります。そしてここがずれると、あとあと地獄がやってきます。</p>

<p><br/></p>

<p>　翻訳のあとは（場合によっては翻訳と並行して）収録が始まるし、なにかミスや修正があったからと言って、そのたびに作業を巻き戻していては、それでなくても混乱した現場が収拾不能に陥ります。<br/>
　シナリオだけ請け負っているとその地獄に気が付かない可能性もありますが、海外と翻訳データのやりとりをしてるひと、その実装をまとめているひとが人知れず悲惨な目に合っています。いまのいまも、日本のどこかで泣いているひとがいると思います。</p>

<p><br/></p>

<p>　正直、ゲーム制作者のなかには「テキストは書いて翻訳するだけ」「音声は録音して流し込むだけ」程度に認識しているひとが少なくないと感じています。<br/>
　だけどそんなひとには、翻訳家や声優が演技に賭けている情熱を甘く見ているんではないんですか？　と、問い返したいです。<br/>
　マネージャーに求められるのは、目先の工数の調整だけではなく、スタッフのすべてが己の才能を存分に発揮するための環境作りでもあると、わたくしは思っています。</p>

<p><br/></p>

<p>　翻訳料ってたぶんシナリオライターが書くギャラより高いので、そこを抑えたいマネージャーがいるのはわからんではないのですが、ト書きを削らなければ予算が回らないような現場なら、シナリオを削減すべきだと、わたくしは思います。ト書きはドキュメンテーションです。それが不完全ならとうぜん炎上しますよ。</p>

<p><br/></p>

<p>　と、マネージャーや製作への助言のようなお話になりましたが、シナリオライター諸氏に伝えたいことは、先にも書いた通り『ト書き・コメントを付けよう』です。</p>

<h4 id="toc_index_12">ト書きに書くこと、書かないこと</h4>

<p>　ト書きを書こう！<br/>
　と、書きましたが、じつはわたくし、ト書きはあまり書かない方です。<br/>
　おいおい、って声が聞こえてきそうですね。<br/>
　すみません。本当にこればかりは、申し訳ない。<br/>
　わりとツーカーの現場が多かったり、そもそも自分でスクリプトを書いて実装してきたという事情もあるのですが、「このくらいテキストから読み取れるだろう」と甘い判断を下してしまうことがたびたびあります。あと、気心の知れた現場だと「さーてどう実装するかなぁ（ニヤニヤ）」もあるんですが。</p>

<p><br/></p>

<p>　ト書きを書かなきゃいけない……と思うのは、コラボ作品などで提携先のチェックを仰ぐときで、その際にはこちらの意図が誤解されないように丁寧にト書きも書きますし、『このセリフはこういう意図』『ここで○○なので、後半はこう心境が変化する』などなど、下手すりゃセリフごとにコメントを入れています。</p>

<p><br/></p>

<p>　というのは、コメントの話ですね。<br/>
　ト書きは状況や行動を示すために書くものですが、ではどのくらい細かい指定が必要かと言えば、『自明なことは書かなくていい』、『雰囲気だけなら書かなくていい』と考えています。<br/>
　理想的には、<br/>
　――シナリオには必要なことが書かれ、不要なことは書かない。<br/>
　を原則にしたいです。<br/>
　そうすることで、シナリオに書いてあるからには必ず意味があるのだと演出に示すことができます。たとえば『去り際に石に躓く』という、いっけん意味のないト書きに思えるようなものでも、わたくしが書いたからには意味を持つのだ、と伝わるように書ければ最高ですね。<br/>
　現実には、「また余計なこと書いとる」と思われて無視されるのですが、それはもう余計なト書きを書き続けてきた己を呪うしかありません。</p>

<p><br/></p>

<p>　ただしゲームでは、演出家が存在しないケースがあります。<br/>
　困りましたねぇ。<br/>
　いや、困ってる場合じゃないんですけど、ゲームの現場って『実装するひと』はいるけど、じゃあそのひとが映像の専門家かというとそうでもないことが多々あります。<br/>
　この場合はシナリオが（シナリオを書いているひとも映像的には素人である可能性が非常に高いのですが）コントロールするしかありません。<br/>
『演出家が存在しないケース』というのはアニメではありえませんが、ゲームだと普通で、指摘しても、それのどこが問題かわからない的な顔をされることもあります。</p>

<h4 id="toc_index_13">演出がいないゲームのカットシーン現場</h4>

<p>　シナリオからスクリプターに直結で、シナリオが上がったらあとは実装するだけ、というケースはゲームでは珍しくありません。</p>

<p><br/></p>

<p>　アニメだとシナリオを書いた後に絵コンテは必須ですし、それぞれのカットの時間帯に応じて色設計がなされ、エフェクトや効果音など必要なものが洗い出されていくのですが、ゲームの場合はスクリプターがひとりいて、このひとがありものの素材を使ってキャラを動かせばカットシーンが出来てしまいます。（※プロジェクトによります！　大きなプロジェクトでは演出がいます！）<br/>
　この場合、スクリプターは工程的には下っ端にあたるわけですが、この下っ端から別部署のエフェクト担当に直接エフェクトの発注が飛ぶことになります。</p>

<p><br/></p>

<p>　これはもちろん、スクリプターの能力を批判しているのではありません。ワークフローの問題です。要はアニメで言うと動画マンから背景班に素材の発注が来るようなものです。その作業優先度や締切はだれが決めるのか、作業がかち合った場合にどう調整するのか、というのが現場の裁量に任されるので、むしろ現場のひとたちは優秀であると言えます。</p>

<h4 id="toc_index_14">ト書きに書くこと、書かないこと・リターン</h4>

<p>　一般論を言いますと、ト書きに、<br/>
「ナイフをくるくる回す」<br/>
　と書くような場合、雰囲気を作りたいだけなら書かなくていいと思います。<br/>
　演出家が好きに決めて、好きに指示すれば良いのです。<br/>
　ナイフがなにかを象徴している、あるいはナイフがあとで重要な意味を持つような場合は書きます。<br/>
　この場合、ドラマやアニメだとわざわざ「このナイフは主人公の攻撃性を表し、後に手放すことで云々……」などと説明しなくても演出家がちゃんと拾ってくれますが、ゲームは拾ってくれる演出家はいないものと考えたほうが良いです。<br/>
　仮にシナリオライターが『攻撃性の象徴』として考えたカットでも――<br/>
「くるくる回せそうなものがキーホルダーしかなかったのでキーホルダー回しておきました」<br/>
　などと返されることがあります。<br/>
　その際はもう、人生は不条理なものと考えて諦めてください。</p>

<p><br/></p>

<p>　みなさんご存知かと思いますが、わたくしのシナリオは無駄なギャグが多く、『シナリオには必要不可欠なものだけが書かれている』とは言い難い状況なので、そう判断されるのも致し方ないかなとは思います。ちゃんと、「シナリオには構成上必要なものしか書きません」と胸を張れるひとなら、それも変わるかと思います。</p>

<p><br/></p>

<p>　あとは自明なこと、セリフの前に「太郎は花子の方を向いた」なども書かなくても良いです。<br/>
　しかし、これももしかしたら、「振り向くという指示がなかったので振り向かせてません」というケースがないとも限りません。だけど、そこまでシナリオで指定するとなると、それはすでに演出ですよ。<br/>
　この場合はもう、演出料までもらってアセットリストからライティングからぜんぶやるというのが筋のような気もちょっとだけしますが、ひとりの人間が、そこまでの仕事は抱え込めないです。</p>

<h4 id="toc_index_15">ルビ問題</h4>

<p>　さて、ト書きの話をするはずが、ワークフローの話に大きくズレてしまいましたが、次はルビの話です。<br/>
　ルビ、すなわちフリガナですね。<br/>
　<ruby><rb>薔薇</rb><rt>バラ</rt></ruby>の<ruby><rb>蕾</rb><rt>つぼみ</rt></ruby>……みたいな感じで、難読の文字の上に表示します。</p>

<p><br/></p>

<p>　ルビなんか簡単じゃないか、なにが問題なんだと考えるひとも多かろうと思いますが、けっこうたいへんです。<br/>
　みっつの問題があります。<br/>
　ひとつめは、見栄え、もうひとつはワークフロー、さいごにデータの品質です。</p>

<p><br/></p>

<p>　Unreal Engine などのゲームエンジンを使っていると、既存の仕組みで使えるものはあるのですが、出版関係のルビを見慣れているとどうにも不格好で、品質が悪く見えるのです。<br/>
　標準的には HTML と同じような仕組みで、『ルビ付きの文字列』でブロックを確保して表示しているのだと思いますが、このため、ルビのついた文字列の字間がおかしくなります。<br/>
　ためしにやってみましょう。</p>

<p><br/></p>

<p>　<ruby><rb>名村英敏</rb><rt>なむらひでとし</rt></ruby>の<ruby><rb>原画</rb><rt>げんが</rt></ruby>デビューはとある<ruby><rb>ＯＶＡ</rb><rt>オリジナルビデオアニメ</rt></ruby>だった。</p>

<p><br/></p>

<p>　この本を読んでる方は Kindle が過半だと思いますが、Kindle ではどう見えているでしょうか？　こちらでもプレビュワーで環境ごとの見え方はチェックしているのですが、たまに実機で表示が変わることがあるようです。</p>

<p><br/></p>

<p>　ウェブで見ると、ＯＶＡのところが広がって見えるはずです。<br/>
　いままでソフトハウス三社のサイトを作った経験があります。ウェブでルビがどう表示されるか嫌というほど見てきて慣れているのですが、そうでないひとは出版のルビしか見たことがなく、文字間が広がったルビはとてもかっこ悪く見えるはずです。</p>

<p><br/></p>

<p>　これを回避するために『るＯＶＡだ』まで巻き込んでルビを振るという手がありますが、それをやるとテキストデータがデータとして汚染されていくのです。『ＯＶＡ』に『オリジナルビデオアニメ』というルビが付くのはデータとして正しい記述ですが、『るＯＶＡだ』にルビを付けたのでは、バグを仕込んでるのと同じことになってしまいます。</p>

<p><br/></p>

<p>　次に、ワークフローの問題です。<br/>
　ルビを振る箇所には、だれかがルビ用のタグを打ち込むしかありませんが、脚本家が各自で判断するわけではありません。だれかが一括で、この字にはルビをつける、この字にはつけない、と判断して作業する必要があります。しかも、ルビを打った後もテキストの調整が入る可能性があります。それをどんな作業フローに収めるのか。<br/>
　小説では初出の難読漢字、初出の登場人物にルビを付けるというのが一般的ですが、ゲームの場合どうするのか。イベントの順番はユーザーごとに入れ替わる可能性が高く、どれが初出という判別はつかず、すべてにつくことになります。それらを含めて仕様を決定しなければなりません。<br/>
　また、プレビューでの視認性が落ちますし、改行を手打ちで書いている場合は調整不能に陥ることもあります。</p>

<p><br/></p>

<p>　そして三番目がデータ汚染なのですが、これは最初の見栄えのところでも触れた通り、ルビタグのルールを明確にしていかないとデータとしてのテキストの価値が毀損されてしまいます。たとえば例に出したような『るＯＶＡだ』に『オリジナルビデオアニメ』というルビがついたテキストデータは、はたしてプラットフォームが変わったときにそのまま再利用できるのか。これを一括でチェックする手順はもちろん用意されておらず、すべてのルビを手作業で確認しなければいけなくなります。</p>

<p><br/></p>

<p>　それでもやるのであれば――おそらく君はやるだろう。わたしの制止を振り切って――ワークフローの準備からなにから進めさせていただきますが、かなり工数取ると思いますよ。</p>

<h4 id="toc_index_16">？？？</h4>

<p class="talk">草石ナリオ「はい、そんなわけで<ruby><rb>草石</rb><rt>くさいし</rt></ruby>ナリオと<ruby><rb>与久</rb><rt>よく</rt></ruby>マナブのコーナーのはじまりでーす！」</p>

<p class="talk">与久マナブ「せ、先生っ……」</p>

<p class="talk">草石ナリオ「えー、みなさん地の文だらけでお疲れでしょうから、この先は、えー」</p>

<p class="talk">与久マナブ「先生、早いです」</p>

<p class="talk">草石ナリオ「小生、草石ナリオと与久マナブの……はい？」</p>

<p class="talk">与久マナブ「ぼくらの出番は、次の章ですよ」</p>

<p class="talk">草石ナリオ「次の章？」</p>

<p class="talk">与久マナブ「そう！　第４章、『お話を書いてみよう！』から登場するんです」</p>

<p class="talk">草石ナリオ「ということは……」</p>

<p class="talk">与久マナブ「出番間違っちゃってます」</p>

<p class="talk">草石ナリオ「あー。マナブくん、またやらかしちゃったわけだ」</p>

<p class="talk">与久マナブ「ぼくが？　そうじゃないですよ、先生がやらかしたんですよ」</p>

<p class="talk">草石ナリオ「先生が？　小生が？　はて？」</p>

<p class="talk">与久マナブ「はて？　じゃなくて、いったん引っ込みますよ！」</p>

<p class="talk">草石ナリオ「ああ、はい」</p>

<p class="talk">与久マナブ「さあ！　行きましょう！」</p>

<h4 id="toc_index_17"><ruby><rb>怠惰</rb><rt>だじょう</rt></ruby></h4>

<p>　ルビは、素で読み方を覚え間違っていると、それが出てしまうので注意が必要です。<br/>
　たとえば『慧眼』に『すいがん』とルビを振るひとが稀にいます。<br/>
　そういうひとは『慧眼』とは書かずに、そもそも『彗眼』と書くので、ルビの作業前に校正が入れば気がつくんでしょうが、それにしても『すいがん』で変換候補を挙げてくる日本語入力がどうかしてますよね。<br/>
　わたくしの場合、『怠惰』を『たいだ』と読むのはわかっているのですが、文章中で出てくるとどうしても『だじょう』と読んでしまいます。（もちろん、そんなルビを振ったことはありません）</p>

<p><br/></p>

<p>　年齢層の高いゲームだと、どうしても古語風の言い回しが増え、しかも元テキストを書いたひととルビを振るひとが別というケースもあり、作業者同志（そこそこ文章書いてるひとですよ）で、「これなんて読むの？」「知らん」なんてやりとりがよく発生していました。そりゃあプロマネもルビを入れろと指示しますよね。</p>

<h4 id="toc_index_18">スクリプトについて、入り口だけ紹介</h4>

<p>　テキストのデータ価値の話が出たところで、スクリプトのお話を挟んでおきます。<br/>
　スクリプトのお話など面倒で嫌だなぁ、というひとはカニを数えてください。<br/>
　カニ。<br/>
　この、ルビ用のタグを一発で設定する、あるいはルビのついた項目だけ抜き出す、頻度を数える、などに使えるのがスクリプトです。カニ。</p>

<p><br/></p>

<p>　スクリプト言語（スクリプトはプログラムなので、プログラム言語と同様に言語と呼ばれます）には種類があって、それぞれに得意分野があります。<br/>
　今日はそこだけ、さらっと流して見ておいてください。</p>

<p><br/></p>

<p>・Perl<br/>
　テキスト処理を得意とする言語で、お手軽で、適当ですカニ。<br/>
　むかし、ホームページの掲示板を各自で作っていたころに、安易な内容のハウツー本が溢れてしまったため、Perlのハウツー本は基本的に地雷です。<br/>
　どんなひとにオススメか：手軽にやっつけたいひと。</p>

<p><br/></p>

<p>・Ruby<br/>
　プログラムの入門としても最適な、お行儀の良い言語です。<br/>
　Perl よりも少しオブジェクト指向（少し面倒な手続きが必要な仕組み）を意識する必要があり、そのぶん論理的な考え方が身につきますカニ。<br/>
　どんなひとにオススメか：真面目にコツコツ学びたいひと。</p>

<p><br/></p>

<p>・Python<br/>
　読みやすく、覚えやすく、ひとと共有したときにミスが少ない言語です。<br/>
　MAYA という３Ｄツールを使っていると、Python でスクリプトを書くことがあると思います。<br/>
　どんなひとにオススメか：みんなとスクラム組んでがんばるカニ。</p>

<p><br/></p>

<p>・javascript<br/>
　上記の言語と異なり、アプリをインストールすることなく使えるのが特徴です。<br/>
　HTML に記述するだけで使えますが、そこそこ癖が強く、言語の仕組みを知っていると不思議な使いカニがカニます。<br/>
　どんなひとにオススメか：縁日のお化け屋敷につい入っちゃうひと。</p>

<p><br/></p>

<p>・PHP<br/>
　ホームカニページを作るひと以外には使うカニ機会がありません。<br/>
　サーバにデータをカニ蓄積したい、あるいはサーバ側でなにかカニ処理したい、という場合には有効です。<br/>
　どんなひとにオススメか：墓場にお化け屋敷があっても気にしないひと。</p>

<p><br/></p>

<p>　では、これらの言語のなかでどれがオススメか……？<br/>
　よくぞ聞いてくれました！<br/>
　それがとっておき、Lua です！<br/>
　どんなひとにオススメか：ゲームが好きで好きでたまらないひと。</p>

<p><br/></p>

<p>　さて、カニはいくつ見つかったでしょうか？<br/>
　答えは、１１個です。</p>

<h4 id="toc_index_19">World of Warcraft</h4>

<p>　よりにもよって Lua を薦めてきたかー、とか、うわーめんどくさそうだなー、とか思ったひとは大正解。この項は飛ばしてください。ただの趣味語りのコーナーです。</p>

<p><br/></p>

<p>　みなさん、World of Warcraft というゲームはご存知でしょうか。<br/>
　ＭＭＯＲＰＧ、要するにネットでみんなで接続して遊ぶＲＰＧなんですが、このゲームの UI の大部分がスクリプトで実装されていました。<br/>
　このスクリプトは仕様が公開され、だれもが手軽に UI を追加・変更できたのです。わたくしも、敵に狙われたら画面にジョジョのような『ドドドドドド』が表示される AddOn を作って遊んでいました。</p>

<p><br/></p>

<p>　この World of Warcraft の AddOn に使われていたのが Lua という言語です。<br/>
　かなり癖があって、ゲーム以外のところで使えと言われても御免被る感じだったんですが、この組み込みの仕組みそのものは秀逸でした。<br/>
　World of Warcraft では API（機能）とトリガーとがサイトに公開されていて、それを見渡すとこのゲームがどんな仕組みで動いているかまで把握できたものです。<br/>
　しかしいかんせん英語タイトルであること、日本語版が存在しないことから、完全に把握するには至りませんでした。いまにして思えば、トロフィー（Achievement）あたりの実装方法などはちゃんと調べておくべきでした。まあ、今からでも遅くはないんですけど、最大の障壁は『英語』です。英語のサイトで、自分が作りたいツールに必要な機能を漁るのはたいへんでした。</p>

<p><br/></p>

<p>　その後、Lua は国産のゲームにも採用されるようになったので、ゲームのスクリプトを書いたことがあるひとで触ったことのあるひとは多いと思います。そしておそらくそのほとんどが Lua の不可思議な書式にクビをひねったことでしょう。<br/>
　正直なところ、テキストの処理に使うのであれば Lua は向かないです。</p>

<h4 id="toc_index_20">オススメのテキストエディタ</h4>

<p>　スクリプトは敷居が高い！<br/>
　テキストエディタだけでなんとかならんのかね！<br/>
　と、おっしゃる方のために、オススメのテキストエディタを紹介して第３章を〆たいと思います。</p>

<p><br/></p>

<p>　以前はスクリプトを使いこなすことでずいぶん作業効率をアップできましたが、最近ではテキストエディタが高機能化したおかげで、よほどのことがないかぎりエディタの機能で乗り切れるようになりました。<br/>
　古の時代の話になりますが、sed, awk といったテキスト変換ツールを使いこなせるかどうかで仕事のポジションが変わったものです。</p>

<p><br/></p>

<p>　それはさておき。ありがちなテキストエディタの紹介は『使ってみないとわかりませんから』とか『ユーザーの用途によっても』とかヘナチョコなことを言って複数挙げられることが多いと思いますが、ここでは筆者が普段使っているものとその使い勝手を紹介する、という意味で一本に絞って紹介します。</p>

<p><br/></p>

<p>　それはずばり、Visual Studio Code（VScode）です。</p>

<p><br/></p>

<p>　以前は Atom というエディタとどっちを使おうか悩ましい時期があったのですが、いまはめっきりこれだけになりました。<br/>
　基本は英語なのですが、日本語化も可能です。<br/>
　入手場所や詳しい使用方法は検索して調べてみてください。<br/>
　自慢ではありませんが、その説明ができるほどは詳しくないです。<br/>
　無責任だと言わないでください！　そんなわたくしでさえ使えると言いたいのです！</p>

<p><br/></p>

<p>　以下に、わたくしが感じている利点を並べます。</p>

<p><br/></p>

<p>・ファイル比較<br/>
　ふたつのファイルを並べて比較しながら書くことができます。<br/>
　少し古いバージョンを隣に開いておけば、うっかりミスして削ったところなどがハイライトされるので、事故を未然に防げます。</p>

<p><br/></p>

<p>・マークダウン書類を編集できる<br/>
　マークダウン書式で書いておけば章ごとに折りたたんでおくこともできますし、全体を見渡すのが楽になります。</p>

<p><br/></p>

<p>・豊富なプラグイン<br/>
　プラグインが豊富で、FTP（ファイルをサーバにアップするアプリ）の組み込みも出来るため、編集した書類がそのままサーバに反映できるようにも設定できます。（便利すぎて逆に怖くなって、オフにしたくらいです）</p>

<p><br/></p>

<p>・正規表現による置換機能<br/>
　他のエディタにもありますが、これがあればテキスト変換ツールの出番が減ります。</p>

<p><br/></p>

<p>・ターミナルを同じウインドウ内に開ける<br/>
　テキストを書きながら同時にスクリプトで変換作業も進めるひとにはとても便利な機能です。わたくしの場合、.md を書きながら、そこから.html と.txt を吐き出すので、たびたびツールを回し、その際に各章の文字数チェックなどを行っています。</p>

<p><br/></p>

<p>・複数端末での同期<br/>
　これはノマド系のライターには必須なのではないかと思いますが、どのマシンで開いても修正が同期され、設定も同期しておくことができます。Mac でも Windows でも使えます。</p>

<p><br/></p>

<p>　と、シナリオのお話だったものがツールのお話へと、だんだんと複雑になってきましたが、次の章は<ruby><rb>会話劇</rb><rt>チャットストーリー</rt></ruby>メインのお気楽な章になります。</p>

<p><br/></p>

<p>　オムニバスにつまんで読んでいける感じに構成しますので、こちらも章タイトルを見て気になるものだけつまんでいただけたらと思います。</p>

<h4 id="toc_index_21">？？？</h4>

<p class="talk">草石ナリオ「草石ナリオとーっ！」</p>

<p class="talk">与久マナブ「先生！　まだちょっとだけ早いです！」</p>

<p class="talk">草石ナリオ「まだなの？」</p>

<p class="talk">与久マナブ「次の水着グラビアのコーナーで第３章終了、ぼくらの登場はその次です！」</p>

<p class="talk">草石ナリオ「仕方がない。では、水着グラビアでも堪能することにするか」</p>

<p class="talk">与久マナブ「水着グラビア……ぼくには既刊本の宣伝に見えるんですけどね……」</p>

<p><br/></p>

<div class="centerimage"><img src="nextpageis.jpg" alt="次のページの案内"/></div>

<h4 class="information" id="toc_index_22">既刊本紹介<span class="upright">③</span>『勇!! なるかな』</h4>

<div class="centerimage"><img src="book3.jpg" alt="本の表紙"/></div>

<p><br/></p>

<p>　さよならおやすみノベルズ既刊本紹介、第三弾は『勇!! なるかな』です。<br/>
　筑後弁全開で書きましたが、実家を出てもう三十年以上経ちますし、かなりウソ筑後弁になっている気がします。<br/>
　漫画家を目指す高校生が主人公の、わたくしの人生の十代二十代をうっすらなぞらえたような物語ですが、中盤以降はモンスターは暴れまわるし、都市は壊滅するし、はちゃめちゃです。立ち上がりが緩やかで、途中からアクセル踏みっぱなしになるのは、わたくしの作品に概ね共通する傾向のようです。<br/>
　この作品、中盤以降の展開で３回アクセルを踏み込んで、これでもかというくらい加速させておりますので、その様もぜひお楽しみください。</p>

<p><br/></p>

<p>　ネタバレになるのですが、主人公の十代と二十代を、それぞれ別のキャラで同時に描くという手法を用いています。<br/>
　そういう意味では、主人公が漫画家になれたかどうか、ってのは、もう一人の男の現状を見ればわかるのですが、オチがすべてでもないし、漫画家としてデビューするか否かのような小さい話でもないので、その向こうにある物語を感じていただけたらと思います。</p>

<p><br/></p>

<p>　わたくしが漫画家を目指したのは、高校のころ、アニメーターを辞めたころ、スクウェアを辞めたころ、の３回ありまして、その最初のころのイメージで描いています。つまり、同じ題材であと２回書けるということですね。<br/>
　と、３回も漫画家を目指しながら夢叶わなかったわたくしですが、せめてその意気込みを誰かに伝えたいと思い、この小説を書きました。<br/>
　……10年後、20年後に、この本を読んで漫画家を目指しました、と言ってくれる漫画家がいたらどんなに嬉しいだろうと思いますが、Kindle のセルフ出版なので、母数は多くありません。ただ、それでも信じています。だれかにこの思いが伝わることを。</p>

<div class="centerimage"><img src="mietakana.jpg" alt="見えたかな？"/></div>
    </body>
</html>
